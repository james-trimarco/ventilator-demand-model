# -*- coding: utf-8 -*-
"""demand_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1txWHlRdswi8gSsZbeTZm-nllzik0EUO-
"""

import numpy as np
import pandas as pd
import datetime
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import seaborn as sns

"""## Demand model
The code below implements a standard SIR model to estimate the numbers of susceptible, infected, and recovered individuals at various points in time.

### Set assumptions
"""

# Total population, N.
N = 327E6

# Initial number of initially infected, recovered, and deceased individuals
infected_init = 29_666  #
recovered_init = 1_000
deceased_init = 0

# Everyone else, susceptible_init, is susceptible to infection initially.
susceptible_init = N - infected_init - recovered_init - deceased_init

# Contact rate, beta, and mean recovery rate gamma, (in 1/days). 
# Mean death rate, kappa
# This is one of the main parameters we imagine users may want to play with.
beta = 0.2
gamma = 0.05
kappa = 0.014  # https://www.statnews.com/2020/03/16/lower-coronavirus-death-rate-estimates/

# A grid of time points (in days)
t = np.linspace(0, 160, 161)

"""### Implement basic SIR model
Shamelessly adapted [from this textbook](https://scipython.com/book/chapter-8-scipy/additional-examples/the-sir-epidemic-model/).
"""

# The SIR model differential equations. 
def deriv(y, t, N, beta, gamma, kappa):
    S, I, R, D = y
    dSdt = -beta * S * I / N
    dIdt = beta * S * I / N - (gamma * I) - (kappa * I)
    dRdt = gamma * I
    dDdt = kappa * I
    return dSdt, dIdt, dRdt, dDdt

# Initial conditions vector
y0 = susceptible_init, infected_init, recovered_init, deceased_init

# Integrate the SIR equations over the time grid, t.
ret = odeint(deriv, y0, t, args=(N, beta, gamma, kappa))
S, I, R, D = ret.T

"""### Put model results into a table"""

data = {'timedelta': t,
        'susceptible': S, 
        'infected': I, 
        'recovered': R, 
        'deceased': D}

df = pd.DataFrame(data)
start_date = pd.to_datetime('03-22-2020')
df['date'] = df['timedelta'].apply(lambda x: start_date + datetime.timedelta(days=x))
#df.set_index('date', inplace=True)
df.head()

plt.ticklabel_format(style='plain', axis='y')

# Plot the data on three separate curves for S(t), I(t) and R(t)
line_plot_data = df.melt(id_vars=['date'], 
                         value_vars=['susceptible', 'infected', 'recovered', 'deceased'], 
                         value_name='count', 
                         var_name='type')

#line_plot_data.head()
sns.lineplot(x='date', y='count', hue='type', data=line_plot_data)

"""## Supply model
The code below
"""

newer_vents = 62_000
older_vents = 98_738
percent_usable = .9
vents_already_in_use = 40_000
available_vents_init = round(newer_vents + (older_vents * percent_usable) - vents_already_in_use)

print(f"We start with {available_vents_init} ventilators available in the U.S.")

